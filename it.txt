#Practical 1
import numpy as np
import matplotlib.pyplot as plt
from skimage import img_as_uint
from skimage.io import imshow, imread
from skimage.color import rgb2hsv
from skimage.color import rgb2gray
array_1 = np.array([[255, 0], [0, 255]])
plt.imshow(array_1, cmap = 'gray')
plt.show()
array_2 = np.array([[255, 0, 255], [0, 255, 0],[255, 0, 255]])
plt.imshow(array_2, cmap = 'gray');
plt.show()
array_spectrum = np.array([np.arange(0,255,17),np.arange(255,0,-17),np.arange(0,255,17),np.arange(255,0,-17)])
fig, ax = plt.subplots(1, 2, figsize=(12,4))
ax[0].imshow(array_spectrum, cmap = 'gray')
ax[0].set_title('Arange Generation')
ax[1].imshow(array_spectrum.T, cmap = 'gray')
ax[1].set_title('Transpose Generation')
array_colors = np.array([[[255, 0, 0], [0, 255, 0],[0, 0, 255]]])
plt.imshow(array_colors);
plt.show()
 
# manipulating an actual image.
from google.colab import files
uploaded = files.upload()
import matplotlib.pyplot as plt
import matplotlib
from skimage import img_as_uint
from skimage.io import imshow, imread
from skimage.color import rgb2hsv
from skimage.color import rgb2gray
lena = imread('lena.jpg')
plt.imshow(lena)
plt.show()
lena.shape
#slice the img matrix and represent each section as its own image box.
fig, ax = plt.subplots(1, 3, figsize=(6,4), sharey= True)
ax[0].imshow(lena[:, 0:130])
ax[0].set_title('First Split')
ax[1].imshow(lena[:, 130:260])
ax[1].set_title('Second Split')
ax[2].imshow(lena[:, 260:390])
ax[2].set_title('Third Split');
plt.imshow(lena[95:250, 130:275])
plt.show()
#representation of the imageâ€™s Red, Green, and Blue components.
fig, ax = plt.subplots(1, 3, figsize=(12,4), sharey = True)
ax[0].imshow(lena[:,:,0], cmap='Reds')
ax[0].set_title('Red')
ax[1].imshow(lena[:,:,1], cmap='Greens')
ax[1].set_title('Green')
ax[2].imshow(lena[:,:,2], cmap='Blues')
ax[2].set_title('Blue')
#Convert the image from RGB (Red, Green, Blue) to HSV (Hue, Saturation, Value).
lena_hsv = rgb2hsv(lena)
fig, ax = plt.subplots(1, 3, figsize=(12,4), sharey = True)
ax[0].imshow(lena_hsv[:,:,0], cmap='hsv')
ax[0].set_title('Hue')
ax[1].imshow(lena_hsv[:,:,1], cmap='gray')
ax[1].set_title('Saturation')
ax[2].imshow(lena_hsv[:,:,2], cmap='gray')
ax[2].set_title('Value');
#convert the image matrix to grayscale.
lena_gray = rgb2gray(lena)
fig, ax = plt.subplots(1, 5, figsize=(17,6), sharey = True)
ax[0].imshow(lena_gray, cmap = 'gray')
ax[0].set_title('Grayscale Original')
ax[1].imshow(img_as_uint(lena_gray > 0.25), cmap = 'gray')
ax[1].set_title('Greater than 0.25')
ax[2].imshow(img_as_uint(lena_gray > 0.50), cmap = 'gray')
ax[2].set_title('Greater than 0.50')
ax[3].imshow(img_as_uint(lena_gray > 0.75), cmap = 'gray')
ax[3].set_title('Greater than 0.75')
ax[4].imshow(img_as_uint(lena_gray > np.mean(lena_gray)), cmap = 'gray')
ax[4].set_title('Greater than Mean')


1.Reducing Quantization Values:
import numpy as np
import matplotlib.pyplot as plt
# Create a sample image
img = np.random.rand(256, 256)
# Reduce the quantization values to 2 bits (4 levels)
reduced_img_2bits = np.round(img * 3) / 3
# Reduce the quantization values to 1 bit (2 levels)
reduced_img_1bit = np.round(img)
# Display the images
plt.subplot(1, 3, 1)
plt.imshow(img, cmap='gray')
plt.title('Original Image')
plt.subplot(1, 3, 2)
plt.imshow(reduced_img_2bits, cmap='gray')
plt.title('2 bits (4 levels)')
plt.subplot(1, 3, 3)
plt.imshow(reduced_img_1bit, cmap='gray')
plt.title('1 bit (2 levels)')
plt.show()
2.Reducing the Number of Samples:
import numpy as np
import matplotlib.pyplot as plt
# Create a sample image
img = np.random.rand(256, 256)
# Reduce the number of samples to half
reduced_img_half = img[::2, ::2]
# Reduce the number of samples to quarter
reduced_img_quarter = img[::4, ::4]
# Display the images
plt.subplot(1, 3, 1)
plt.imshow(img, cmap='gray')
plt.title('Original Image')
plt.subplot(1, 3, 2)
plt.imshow(reduced_img_half, cmap='gray')
plt.title('Half Resolution')
plt.subplot(1, 3, 3)
plt.imshow(reduced_img_quarter, cmap='gray')
plt.title('Quarter Resolution')
plt.show()
3.Reducing Both Quantization Values and Number of Samples:
import numpy as np
import matplotlib.pyplot as plt
# Create a sample image
img = np.random.rand(256, 256)
# Reduce the quantization values to 2 bits (4 levels) and number ofsamples to half
reduced_img_2bits_half = np.round(img[::2, ::2] * 3) / 3
# Reduce the quantization values to 1 bit (2 levels) and number of samplesto quarter
reduced_img_1bit_quarter = np.round(img[::4, ::4])
# Display the images
plt.subplot(1, 3, 1)
plt.imshow(img, cmap='gray')
plt.title('Original Image')
plt.subplot(1, 3, 2)
plt.imshow(reduced_img_2bits_half, cmap='gray')
plt.title('2 bits (4 levels),\n Half Resolution')
plt.subplot(1, 3, 3)
plt.imshow(reduced_img_1bit_quarter, cmap='gray')
plt.title('1 bit (2 levels),\n Quarter Resolution')
plt.show()

#Practical 2
!pip install opencv-python
from IPython import get_ipython
from IPython.display import display
import cv2
import numpy as np
import matplotlib.pyplot as plt
from google.colab.patches import cv2_imshow
from skimage import data
# Load a sample image (e.g., coins)
coins_image = data.coins()
# Convert the image from scikit-image to an OpenCV format
coins_image_cv2 = cv2.cvtColor(coins_image, cv2.COLOR_GRAY2BGR)
# ... (use coins_image_cv2 with OpenCV functions)
# Load the 'astronaut' image
astronaut_image = data.astronaut()
# Convert the image from scikit-image to an OpenCV format
astronaut_image_cv2 = cv2.cvtColor(astronaut_image, cv2.COLOR_RGB2BGR)
#Assuming RGB input
cv2_imshow(coins_image_cv2) # Use cv2_imshow instead of cv2.imshow
cv2_imshow(astronaut_image_cv2) # Use cv2_imshow instead of cv2.imshow
# Store the data as images to be readable
cv2.imwrite('coins_image_cv2.jpg',coins_image_cv2)
cv2.imwrite('astronaut_image_cv2.jpg',astronaut_image_cv2)
image1 = cv2.imread('coins_image_cv2.jpg')
image2 = cv2.imread('astronaut_image_cv2.jpg')
# Print the shapes of the original images
print(f"Original Image 1 shape: {image1.shape}")
print(f"Original Image 2 shape: {image2.shape}")
# Resize image1 to match the dimensions of image2 (for all operations)
image1_resized = cv2.resize(image1, (image2.shape[1], image2.shape[0]))
# Perform operations
added_image = cv2.add(image1_resized, image2)
subtracted_image = cv2.subtract(image1_resized, image2)
multiplied_image = cv2.multiply(image1_resized, 0.5)
divided_image = cv2.divide(image1_resized, 2)
# Create a figure and subplots (adjust figsize if needed)
fig, axes = plt.subplots(3, 3, figsize=(15, 15))
# --- Display images in subplots ---
# Original Images
axes[0, 0].imshow(cv2.cvtColor(image1, cv2.COLOR_BGR2RGB))
axes[0, 0].set_title(f'Original Image 1({image1.shape[1]}x{image1.shape[0]})') # Add size to title
axes[0, 0].axis('off')
axes[0, 1].imshow(cv2.cvtColor(image2, cv2.COLOR_BGR2RGB))
axes[0, 1].set_title(f'Original Image 2({image2.shape[1]}x{image2.shape[0]})') # Add size to title
axes[0, 1].axis('off')
# Resized Image 1 (for comparison)
axes[0, 2].imshow(cv2.cvtColor(image1_resized, cv2.COLOR_BGR2RGB))
axes[0, 2].set_title(f'Resized Image 1({image1_resized.shape[1]}x{image1_resized.shape[0]})') # Add size totitle
axes[0, 2].axis('off')
# Operation Results
axes[1, 0].imshow(cv2.cvtColor(added_image, cv2.COLOR_BGR2RGB))
axes[1, 0].set_title(f'Added Image({added_image.shape[1]}x{added_image.shape[0]})') # Add size to title
axes[1, 0].axis('off')
axes[1, 1].imshow(cv2.cvtColor(subtracted_image, cv2.COLOR_BGR2RGB))
axes[1, 1].set_title(f'Subtracted Image({subtracted_image.shape[1]}x{subtracted_image.shape[0]})') # Add size to title
axes[1, 1].axis('off')
axes[1, 2].axis('off') # Empty subplot for better layout
axes[2, 0].imshow(cv2.cvtColor(multiplied_image, cv2.COLOR_BGR2RGB))
axes[2, 0].set_title(f'Multiplied Image (x0.5)({multiplied_image.shape[1]}x{multiplied_image.shape[0]})') # Add size totitle
axes[2, 0].axis('off')
axes[2, 1].imshow(cv2.cvtColor(divided_image, cv2.COLOR_BGR2RGB))
axes[2, 1].set_title(f'Divided Image (/2)({divided_image.shape[1]}x{divided_image.shape[0]})') # Add size to title
axes[2, 1].axis('off')
axes[2, 2].axis('off') # Empty subplot for better layout
plt.tight_layout()
plt.show()
# Resize image1 to match the dimensions of image2 (for all operations)
image1_resized = cv2.resize(image1, (image2.shape[1], image2.shape[0]))
# Perform operations
added_image = cv2.add(image1_resized, image2)
subtracted_image = cv2.subtract(image1_resized, image2)
multiplied_image = cv2.multiply(image1_resized, 0.5)
divided_image = cv2.divide(image1_resized, 2)
# Blending images (weighted addition)
blended_image = cv2.addWeighted(image1_resized, 0.7, image2, 0.3, 0) #
#Using resized image1
# Create a figure and subplots (adjust figsize if needed)
fig, axes = plt.subplots(3, 3, figsize=(15, 15))
# --- Display images in subplots ---
# Original Images
axes[0, 0].imshow(cv2.cvtColor(image1, cv2.COLOR_BGR2RGB))
axes[0, 0].set_title(f'Original Image 1({image1.shape[1]}x{image1.shape[0]})') # Add size to title
axes[0, 0].axis('off')
axes[0, 1].imshow(cv2.cvtColor(image2, cv2.COLOR_BGR2RGB))
axes[0, 1].set_title(f'Original Image 2({image2.shape[1]}x{image2.shape[0]})') # Add size to title
axes[0, 1].axis('off')
# Resized Image 1 (for comparison)
axes[0, 2].imshow(cv2.cvtColor(image1_resized, cv2.COLOR_BGR2RGB))
axes[0, 2].set_title(f'Resized Image 1({image1_resized.shape[1]}x{image1_resized.shape[0]})') # Add size to title
axes[0, 2].axis('off')
# Operation Results
axes[1, 0].imshow(cv2.cvtColor(added_image, cv2.COLOR_BGR2RGB))
axes[1, 0].set_title(f'Added Image({added_image.shape[1]}x{added_image.shape[0]})') # Add size to title
axes[1, 0].axis('off')
axes[1, 1].imshow(cv2.cvtColor(subtracted_image, cv2.COLOR_BGR2RGB))
axes[1, 1].set_title(f'Subtracted Image({subtracted_image.shape[1]}x{subtracted_image.shape[0]})') # Add size to title
axes[1, 1].axis('off')
axes[1, 2].axis('off') # Empty subplot for better layout
axes[2, 0].imshow(cv2.cvtColor(multiplied_image, cv2.COLOR_BGR2RGB))
axes[2, 0].set_title(f'Multiplied Image (x0.5)({multiplied_image.shape[1]}x{multiplied_image.shape[0]})') # Add size to title
axes[2, 0].axis('off')
axes[2, 1].imshow(cv2.cvtColor(divided_image, cv2.COLOR_BGR2RGB))
axes[2, 1].set_title(f'Divided Image (/2)({divided_image.shape[1]}x{divided_image.shape[0]})') # Add size to title
axes[2, 1].axis('off')
# Blending Result
axes[2, 2].imshow(cv2.cvtColor(blended_image, cv2.COLOR_BGR2RGB))
axes[2, 2].set_title(f'Blended Image({blended_image.shape[1]}x{blended_image.shape[0]})')
axes[2, 2].axis('off')
plt.tight_layout()
plt.show()
#DCT
!pip install opencv-python
from IPython import get_ipython
from IPython.display import display
import cv2
import numpy as np
import matplotlib.pyplot as plt
from google.colab.patches import cv2_imshow
from skimage import data
# Load a sample image (e.g., coins)
coins_image = data.coins()
# Convert the image from scikit-image to an OpenCV format
# The original code converted to BGR, causing the error
# Instead, keep it as grayscale for DCT
coins_image_cv2 = coins_image
# Load the image in grayscale
# Apply DCT (Discrete Cosine Transform)
dct_image = cv2.dct(np.float32(coins_image_cv2))
 # Apply Inverse DCT (optional, for reconstruction)
idct_image = cv2.idct(dct_image)
 # Plotting the original, DCT, and IDCT (reconstructed) images
plt.figure(figsize=(12, 6))
plt.subplot(1, 3, 1)
plt.title('Original Image')
plt.imshow((coins_image_cv2), cmap='gray') # Original image is grayscale
plt.axis('off')
plt.subplot(1, 3, 2)
plt.title('DCT Image')
plt.imshow(np.log(abs(dct_image) + 1), cmap='gray') # Log scale for better visibility
plt.axis('off')
plt.subplot(1, 3, 3)
plt.title('Reconstructed Image')
plt.imshow(idct_image, cmap='gray') # Reconstructed image is grayscale
plt.axis('off')
plt.show()
# With lena.jpeg image
!pip install opencv-python
!pip install matplotlib
!pip install scikit-image
import cv2
import numpy as np
import matplotlib.pyplot as plt
# Load lena.jpg image
im = cv2.imread('lena.jpg', cv2.IMREAD_GRAYSCALE) # Read as grayscale
im = im.astype(np.float64) # Convert to double precision (like MATLAB's double)
plt.figure(figsize=(12, 4))
plt.subplot(1, 3, 1)
plt.imshow(im, cmap='gray')
plt.title('Original')
plt.axis('off')
# Apply DCT (Discrete Cosine Transform) - Using OpenCV
dct_image = cv2.dct(np.float32(im))
plt.subplot(1, 3, 2)
plt.imshow(np.log(abs(dct_image) + 1), cmap='gray') # Log scale for better visibility
plt.title('DCT Transform')
plt.axis('off')
# Apply DCT again to the DCT result
dct_dct_image = cv2.dct(np.float32(dct_image))
plt.subplot(1, 3, 3)
plt.imshow(dct_dct_image, cmap='gray') # You might need to adjust scaling here
plt.title('DCT(DCT) Transform')
plt.axis('off')
plt.show()

#Practical 3
1.Linear (negative transformations)
import cv2
import matplotlib.pyplot as plt
original_image = cv2.imread("lena.jpg")
# Perform the negative transformation
negative_image = 256 - 1 - original_image #s=L-1-r
# Display the original and negative images side by side
plt.figure(figsize=(10, 5)) # Create a figure with a specified size
plt.subplot(1, 2, 1) # Subplot for the original image
plt.imshow(cv2.cvtColor(original_image, cv2.COLOR_BGR2RGB))
plt.title("Original Image")
plt.axis('off') # Turn off axis labels
plt.subplot(1, 2, 2) # Subplot for the negative image
plt.imshow(cv2.cvtColor(negative_image, cv2.COLOR_BGR2RGB))
plt.title("Negative Image")
plt.axis('off')
plt.show() # Show the figure with both images

 
2.Log Transformation (Logarithm Function) & Inverse-Log Transformation (Exponential Function)
import cv2
import numpy as np # Load an image
image = cv2.imread(â€˜lena.jpgâ€™, cv2.IMREAD_GRAYSCALE) 
# Log Transformation
c = 45
log_transformed = c * (np.log(image + 1)) 
# Convert to 8-bit unsigned integer format
log_transformed = np.uint8(log_transformed)
# Inverse-Log Transformation
inverse_log_transformed = c * (np.exp(log_transformed / c) - 1)
# Convert to 8-bit unsigned integer format
inverse_log_transformed = np.uint8(inverse_log_transformed)
# Display the original and negative images side by side
plt.figure(figsize=(10, 5)) # Create a figure with a specified size
plt.subplot(1, 3, 1) # Subplot for the original image
plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
plt.title("Original Image")
plt.axis('off') # Turn off axis labels
plt.subplot(1, 3, 2)
plt.imshow(cv2.cvtColor(log_transformed, cv2.COLOR_BGR2RGB))
plt.title("log_transformed")
plt.axis('off')
plt.subplot(1, 3, 3)
plt.imshow(cv2.cvtColor(inverse_log_transformed, cv2.COLOR_BGR2RGB))
plt.title("inverse_log_transformed")
plt.axis('off')
plt.show()
 
3.Power Law Transformations
import cv2
import numpy as np
image = cv2.imread(â€˜lena.jpgâ€™, cv2.IMREAD_GRAYSCALE)
# Apply gamma correction (e.g., gamma = 1.5)
gamma = 2
gamma2=4
adjusted_image = np.power(image / 255.0, gamma) * 255.0
adjusted_image = adjusted_image.astype(np.uint8)
adjusted_image2 = np.power(image / 255.0, gamma2) * 255.0
adjusted_image2 = adjusted_image2.astype(np.uint8)
plt.figure(figsize=(10, 5)) 
plt.subplot(1, 3, 2) 
plt.imshow(cv2.cvtColor(adjusted_image, cv2.COLOR_BGR2RGB))
plt.title("adjusted_image gamma =2")
plt.subplot(1, 3, 1) 
plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
plt.title("Original Image")
plt.subplot(1, 3, 3) 
plt.imshow(cv2.cvtColor(adjusted_image2, cv2.COLOR_BGR2RGB))
plt.title("Original Image gamma = 4")
plt.axis('off')
 
4. Piecewise Linear Transformations:
	1. Contrast Stretching:
 
import cv2
import numpy as np
# Function to map each intensity level to output intensity level.
def pixelVal(pix, r1, s1, r2, s2):
  if (0 <= pix and pix <= r1):
    return (s1 / r1)*pix
  elif (r1 < pix and pix <= r2):
    return ((s2 - s1)/(r2 - r1)) * (pix - r1) + s1
  else:
    return ((255 - s2)/(255 - r2)) * (pix - r2) + s2
# Open the image.
img = cv2.imread('lena.jpg',cv2.IMREAD_GRAYSCALE)
# Define parameters.
r1 = 70
s1 = 0
r2 = 140
s2 = 255
# Vectorize the function to apply it to each value in the Numpy array.
pixelVal_vec = np.vectorize(pixelVal)
# Apply contrast stretching.
contrast_stretched = pixelVal_vec(img, r1, s1, r2, s2)
# Save edited image.
cv2.imwrite('contrast_stretch.jpg', contrast_stretched)
# Display the original and contrast-stretched images side by side
plt.figure(figsize=(10, 5)) # Create a figure with a specified size
plt.subplot(1, 2, 1) # Subplot for the original image
plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
plt.title("Original Image")
plt.axis('off') # Turn off axis labels
plt.subplot(1, 2, 2) # Subplot for the contrast-stretched image
plt.imshow(cv2.cvtColor(contrast_stretched.astype(np.uint8),
cv2.COLOR_BGR2RGB))
plt.title('Contrast Stretched Image')
plt.axis('off') # Turn off axis labels
plt.show()
 
â€¢2. Thresholding
import cv2
import matplotlib.pyplot as plt
def threshold_image(image_path, threshold_value):
  # Load the image in grayscale
 img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
 # Apply thresholding
 ret, thresholded_img = cv2.threshold(img, threshold_value, 255,
cv2.THRESH_BINARY)
 # Display the original and thresholded images
 plt.figure(figsize=(10, 5))
 plt.subplot(1, 2, 1)
 plt.imshow(img, cmap='gray')
 plt.title("Original Image")
 plt.axis('off')
 plt.subplot(1, 2, 2)
 plt.imshow(thresholded_img, cmap='gray')
 plt.title("Thresholded Image")
 plt.axis('off')
 plt.show()
# Example usage
threshold_image("lena.jpg", 128) # Replace with your image path anddesired threshold value
 
â€¢3.Intensity Level Slicing (without BG)
import cv2
import numpy as np
import matplotlib.pyplot as plt
# Load the image
img = cv2.imread('lena.jpg', cv2.IMREAD_GRAYSCALE)
# Define the intensity level slicing function
def intensityLevelSlicing(pixel_value):
  if 140 < pixel_value < 210:
    return 255 # Set to white
  else:
    return 0 # Set to black
# Apply the function to each pixel in the image
intensityLevelSlicing_vec = np.vectorize(intensityLevelSlicing)
transformed_image = intensityLevelSlicing_vec(img)
# Display the original and transformed images
plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
plt.title("Original Image")
plt.axis('off')
plt.subplot(1, 2, 2)
plt.imshow(cv2.cvtColor(transformed_image.astype(np.uint8),
cv2.COLOR_BGR2RGB))
plt.title("Intensity Level Sliced Image")
plt.axis('off')
plt.show()

â€¢3.Intensity Level Slicing (with BG)
import cv2
import numpy as np
import matplotlib.pyplot as plt
# Load the image
img = cv2.imread('lena.jpg', cv2.IMREAD_GRAYSCALE)
# Define the intensity level slicing function with background preservation
def intensityLevelSlicingWithBackground(pixel_value):
  if 140 < pixel_value < 210:
    return 255 # Set to white
  else:
    return pixel_value # Preserve original pixel value
# Apply the function to each pixel in the image
intensityLevelSlicing_vec = np.vectorize(intensityLevelSlicingWithBackground)
transformed_image = intensityLevelSlicing_vec(img)
# Display the original and transformed images
plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
plt.title("Original Image")
plt.axis('off')
plt.subplot(1, 2, 2)
plt.imshow(cv2.cvtColor(transformed_image.astype(np.uint8),
cv2.COLOR_BGR2RGB))
plt.title("Intensity Level Sliced Image with Background")
plt.axis('off')
plt.show()

â€¢4.Bit plane Slicing
!pip install google-colab
import cv2
import numpy as np
import matplotlib.pyplot as plt
from google.colab.patches import cv2_imshow
def bit_plane_slicing(image_path):
  # Load the image in grayscale
  img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
  # Calculate the number of rows and columns for subplots
  num_rows = 2 # You can adjust this
  num_cols = 4 # You can adjust this
  # Create a figure and subplots
  fig, axes = plt.subplots(num_rows, num_cols, figsize=(12, 6)) #Adjust figsize as needed
  fig.suptitle("Bit Plane Slicing", fontsize=16)
 # Iterate through each bit plane (0-7)
  for i in range(8):
    # Extract the bit plane
    bit_plane = (img >> i) & 1 # Right shift and bitwise AND
    # Calculate subplot index
    row_index = i // num_cols
    col_index = i % num_cols
    # Display the bit plane in the subplot
    axes[row_index, col_index].imshow(bit_plane * 255, cmap='gray') #Scale for visibility, use gray colormap
    axes[row_index, col_index].set_title(f"Bit Plane {i}")
    axes[row_index, col_index].axis('off') # Turn off axis labels
  plt.tight_layout() # Adjust subplot spacing
  plt.show()
# Example usage
bit_plane_slicing("lena.jpg")

#Histogram
import cv2
import matplotlib.pyplot as plt
def plot_histogram_and_equalize(image_path):
  # Load the image in grayscale
  img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
  # Calculate and plot the histogram
  plt.figure(figsize=(12, 6))
  plt.subplot(1, 2, 1)
  plt.hist(img.ravel(), 256, [0, 256])
  plt.title("Original Histogram")
  plt.xlabel("Pixel Intensity")
  plt.ylabel("Frequency")
  # Perform histogram equalization
  equalized_img = cv2.equalizeHist(img)
  # Calculate and plot the histogram of the equalized image
  plt.subplot(1, 2, 2)
  plt.hist(equalized_img.ravel(), 256, [0, 256])
  plt.title("Equalized Histogram")
  plt.xlabel("Pixel Intensity")
  plt.ylabel("Frequency")
  plt.tight_layout()
  plt.show()
  # Display the original and equalized images
  plt.figure(figsize=(10, 5))
  plt.subplot(1, 2, 1)
  plt.imshow(img, cmap='gray')
  plt.title("Original Image")
  plt.axis('off')
  plt.subplot(1, 2, 2)
  plt.imshow(equalized_img, cmap='gray')
  plt.title("Equalized Image")
  plt.axis('off')
  plt.tight_layout()
  plt.show()
plot_histogram_and_equalize("lena.jpg") 

#LPF & HPF
1. Smoothing (LPF) filters:
# Apply and display the results of mean, Gaussian, and median filters on the image.
import cv2
import numpy as np
import matplotlib.pyplot as plt
try:
  image = cv2.imread(â€˜lena.jpgâ€™, cv2.IMREAD_GRAYSCALE)
  if image is None:
    raise FileNotFoundError(f"Image file 'lena.png' not found.")
except FileNotFoundError as e:
  print(f"Error: {e}")
  exit()
# 1. Mean Filter
kernel_size = (5, 5)
mean_filtered = cv2.blur(image, kernel_size)
# 2. Gaussian Filter
gaussian_filtered = cv2.GaussianBlur(image, kernel_size, 0)
# 3. Median Filter
median_kernel_size = 5 # Must be odd
median_filtered = cv2.medianBlur(image, median_kernel_size)
plt.figure(figsize=(15, 5))
plt.subplot(1, 4, 1)
plt.imshow(image, cmap='gray')
plt.title("Original Image")
plt.axis('off')
plt.subplot(1, 4, 2)
plt.imshow(mean_filtered, cmap='gray')
plt.title("Mean Filtered")
plt.axis('off')
plt.subplot(1, 4, 3)
plt.imshow(gaussian_filtered, cmap='gray')
plt.title("Gaussian Filtered")
plt.axis('off')
plt.subplot(1, 4, 4)
plt.imshow(median_filtered, cmap='gray')
plt.title("Median Filtered")
plt.axis('off')
plt.tight_layout()
plt.show()

2.Sharpening (HIGH PASS FIlters) Filters:
#Using the Laplacian operator and using a kernel to emphasize high frequencies
import cv2
import numpy as np
import matplotlib.pyplot as plt
try:
  image = cv2.imread('lena.png', cv2.IMREAD_GRAYSCALE)
  if image is None:
    raise FileNotFoundError(f"Image file 'lena.png' not found.")
except FileNotFoundError as e:
  print(f"Error: {e}")
  exit()
# --- Spatial High-Pass Filters ---
# 1. Laplacian Filter
laplacian_filtered = cv2.Laplacian(image, cv2.CV_64F)
laplacian_filtered = np.uint8(np.absolute(laplacian_filtered)) 
# 2. High-Pass Kernel Filter
kernel = np.array([[-1, -1, -1],
 [-1, 8, -1],
 [-1, -1, -1]])
high_pass_filtered = cv2.filter2D(image, -1, kernel)
plt.figure(figsize=(15, 5))
plt.subplot(1, 3, 1)
plt.imshow(image, cmap='gray')
plt.title("Original Image")
plt.axis('off')
plt.subplot(1, 3, 2)
plt.imshow(laplacian_filtered, cmap='gray')
plt.title("Laplacian Filtered")
plt.axis('off')
plt.subplot(1, 3, 3)
plt.imshow(high_pass_filtered, cmap='gray')
plt.title("High-Pass Kernel Filtered")
plt.axis('off')
plt.tight_layout()
plt.show()

#DFT IDFT
import cv2
import numpy as np
import matplotlib.pyplot as plt
image = cv2.imread('lena.jpg', cv2.IMREAD_GRAYSCALE)
if image is None:
  print("Error: Image not found. Please ensure 'lena.png' is in the current directory.")
  exit()
# Compute the Discrete Fourier Transform (DFT)
dft = cv2.dft(np.float32(image), flags=cv2.DFT_COMPLEX_OUTPUT)
dft_shift = np.fft.fftshift(dft) # Shift the zero-frequency component to the center
# Compute the magnitude spectrum
magnitude = cv2.magnitude(dft_shift[:, :, 0], dft_shift[:, :, 1])
magnitude_spectrum = 20 * np.log(magnitude + 1) # Add 1 to avoid log(0)
# Inverse Discrete Fourier Transform (IDFT)
dft_ishift = np.fft.ifftshift(dft_shift) # Shift back
idft = cv2.idft(dft_ishift)
# Reconstruct the image (using magnitude, ensuring real values)
reconstructed_image = cv2.magnitude(idft[:, :, 0], idft[:, :, 1])
# Normalize and convert to uint8
reconstructed_image = cv2.normalize(reconstructed_image, None, 0, 255,
cv2.NORM_MINMAX)
reconstructed_image = reconstructed_image.astype(np.uint8)
reconstructed_image = cv2.resize(reconstructed_image, (image.shape[1],
image.shape[0]))
plt.figure(figsize=(15, 5)) # Adjusted figure size to accommodate 3 subplots
plt.subplot(1, 3, 1) # 1 row, 3 columns, first subplot
plt.imshow(image, cmap='gray', aspect='equal')
plt.title('Original Image'), plt.axis('off')
plt.subplot(1, 3, 2) # 1 row, 3 columns, second subplot
plt.imshow(magnitude_spectrum, cmap='gray', aspect='equal') # Displaying magnitude spectrum
plt.title('Magnitude Spectrum'), plt.axis('off')
plt.subplot(1, 3, 3) # 1 row, 3 columns, third subplot
plt.imshow(reconstructed_image, cmap='gray', aspect='equal')
plt.title('Reconstructed Image (IDFT)'), plt.axis('off')
plt.show()
cv2.imwrite('magnitude_spectrum.jpg', magnitude_spectrum)
cv2.imwrite('reconstructed_image.jpg', reconstructed_image)

#Lowpass Ideal,butterworth,gaussian
import cv2
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
# Load the image in grayscale
image = cv2.imread(â€˜mariya.jpgâ€™, cv2.IMREAD_GRAYSCALE)
if image is None:
  print("Error: Image not found. Please ensure 'lena.png' is in thecurrent directory.")
  exit()
rows, cols = image.shape
crow, ccol = rows // 2, cols // 2 # Center of the frequency domain
# Frequency grid
u = np.arange(-ccol, ccol)
v = np.arange(-crow, crow)
U, V = np.meshgrid(u, v)
D = np.sqrt(U**2 + V**2)
# Filter Functions
def ideal_lpf(D, cutoff):
  H = np.zeros_like(D)
  H[D <= cutoff] = 1
  return H
def butterworth_lpf(D, cutoff, order):
  H = 1 / (1 + (D / cutoff)**(2 * order))
  return H
def gaussian_lpf(D, cutoff):
  H = np.exp(-(D**2) / (2 * (cutoff**2)))
  return H
# Apply filters and visualize
def apply_filter(image, filter_function):
  dft = cv2.dft(np.float32(image), flags=cv2.DFT_COMPLEX_OUTPUT)
  dft_shifted = np.fft.fftshift(dft)
  filter_mask = filter_function(D)
  filtered = dft_shifted * filter_mask[:, :, np.newaxis]
  dft_ishifted = np.fft.ifftshift(filtered)
  idft = cv2.idft(dft_ishifted)
  result = cv2.magnitude(idft[:, :, 0], idft[:, :, 1])
  return filter_mask, cv2.normalize(result, None, 0, 255,cv2.NORM_MINMAX)
# Filter parameters
cutoff = 50
order = 2
# Apply the three filters
ideal_mask, ideal_result = apply_filter(image, lambda D: ideal_lpf(D,cutoff))
butter_mask, butter_result = apply_filter(image, lambda D:butterworth_lpf(D, cutoff, order))
gaussian_mask, gaussian_result = apply_filter(image, lambda D:gaussian_lpf(D, cutoff))
# Subplots for each filter
fig, axes = plt.subplots(3, 3, figsize=(18, 12))
# Plot for Ideal Low Pass Filter
axes[0, 0].imshow(image, cmap='gray')
axes[0, 0].set_title('Original Image')
axes[0, 0].axis('off')
axes[0, 1].imshow(np.uint8(ideal_result), cmap='gray')
axes[0, 1].set_title('Ideal LPF Result')
axes[0, 1].axis('off')
ax = fig.add_subplot(331 + 2, projection='3d')
ax.plot_surface(U, V, ideal_mask, cmap='viridis')
ax.set_title('Ideal LPF Transfer Function')
ax.set_xlabel('Frequency U')
ax.set_ylabel('Frequency V')
ax.set_zlabel('Magnitude')
# Plot for Butterworth Low Pass Filter
axes[1, 0].imshow(image, cmap='gray')
axes[1, 0].set_title('Original Image')
axes[1, 0].axis('off')
axes[1, 1].imshow(np.uint8(butter_result), cmap='gray')
axes[1, 1].set_title('Butterworth LPF Result')
axes[1, 1].axis('off')
ax = fig.add_subplot(331 + 5, projection='3d')
ax.plot_surface(U, V, butter_mask, cmap='viridis')
ax.set_title('Butterworth LPF Transfer Function')
ax.set_xlabel('Frequency U')
ax.set_ylabel('Frequency V')
ax.set_zlabel('Magnitude')
# Plot for Gaussian Low Pass Filter
axes[2, 0].imshow(image, cmap='gray')
axes[2, 0].set_title('Original Image')
axes[2, 0].axis('off')
axes[2, 1].imshow(np.uint8(gaussian_result), cmap='gray')
axes[2, 1].set_title('Gaussian LPF Result')
axes[2, 1].axis('off')
ax = fig.add_subplot(331 + 8, projection='3d')
ax.plot_surface(U, V, gaussian_mask, cmap='viridis')
ax.set_title('Gaussian LPF Transfer Function')
ax.set_xlabel('Frequency U')
ax.set_ylabel('Frequency V')
ax.set_zlabel('Magnitude')
plt.tight_layout()
plt.show()

#Highpass Ideal,butterflow,gaussian
import cv2
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
def ideal_highpass_filter(shape, cutoff_frequency):
  """Creates an ideal high-pass filter."""
  rows, cols = shape
  crow, ccol = rows // 2, cols // 2
  mask = np.ones((rows, cols), np.uint8)
  cv2.circle(mask, (ccol, crow), cutoff_frequency, 0, -1)
  return mask
def butterworth_highpass_filter(shape, cutoff_frequency, order=2):
  """Creates a Butterworth high-pass filter."""
  rows, cols = shape
  crow, ccol = rows // 2, cols // 2
  mask = np.zeros((rows, cols), np.float32)
  for i in range(rows):
    for j in range(cols):
      dist = np.sqrt((i - crow)**2 + (j - ccol)**2)
      mask[i, j] = 1 / (1 + (cutoff_frequency / dist)**(2 * order))
  return mask
def gaussian_highpass_filter(shape, cutoff_frequency):
  """Creates a Gaussian high-pass filter."""
  rows, cols = shape
  crow, ccol = rows // 2, cols // 2
  mask = np.zeros((rows, cols), np.float32)
  for i in range(rows):
    for j in range(cols):
      dist = np.sqrt((i - crow)**2 + (j - ccol)**2)
      mask[i, j] = 1 - np.exp(-(dist**2) / (2 *(cutoff_frequency**2)))
  return mask
# Load the image in grayscale
image = cv2.imread('mariya.jpg', cv2.IMREAD_GRAYSCALE)
if image is None:
  print("Error: Image not found. Please ensure 'lena.png' is in the current directory.")
  exit()
# Compute the DFT
dft = cv2.dft(np.float32(image), flags=cv2.DFT_COMPLEX_OUTPUT)
dft_shift = np.fft.fftshift(dft)
# Compute the magnitude spectrum
magnitude = cv2.magnitude(dft_shift[:, :, 0], dft_shift[:, :, 1])
magnitude_spectrum = 20 * np.log(magnitude + 1) # Add 1 to avoid log(0)
# Create the filters
cutoff_frequency = 30 # Adjust as needed
ideal_mask = ideal_highpass_filter(image.shape, cutoff_frequency)
butterworth_mask = butterworth_highpass_filter(image.shape,cutoff_frequency)
gaussian_mask = gaussian_highpass_filter(image.shape, cutoff_frequency)
# Apply the filters
filtered_ideal = dft_shift * ideal_mask[:, :, np.newaxis]
filtered_butterworth = dft_shift * butterworth_mask[:, :, np.newaxis]
filtered_gaussian = dft_shift * gaussian_mask[:, :, np.newaxis]
# Compute the IDFT
ideal_ishift = np.fft.ifftshift(filtered_ideal)
butterworth_ishift = np.fft.ifftshift(filtered_butterworth)
gaussian_ishift = np.fft.ifftshift(filtered_gaussian)
ideal_back = cv2.idft(ideal_ishift)
butterworth_back = cv2.idft(butterworth_ishift)
gaussian_back = cv2.idft(gaussian_ishift)
# Reconstruct the images (using magnitude)
ideal_image = cv2.magnitude(ideal_back[:, :, 0], ideal_back[:, :, 1])
butterworth_image = cv2.magnitude(butterworth_back[:, :, 0], butterworth_back[:, :, 1])
gaussian_image = cv2.magnitude(gaussian_back[:, :, 0], gaussian_back[:, :,1])
# Normalize for display
ideal_image = cv2.normalize(ideal_image, None, 0, 255,cv2.NORM_MINMAX).astype(np.uint8)
butterworth_image = cv2.normalize(butterworth_image, None, 0, 255,cv2.NORM_MINMAX).astype(np.uint8)
gaussian_image = cv2.normalize(gaussian_image, None, 0, 255,cv2.NORM_MINMAX).astype(np.uint8)
# Display the results
plt.figure(figsize=(18, 12)) # Adjusted figure size for more subplots
# Original Image and Magnitude Spectrum
plt.subplot(2, 4, 1), plt.imshow(image, cmap='gray'), plt.title('Original Image')
plt.subplot(2, 4, 2), plt.imshow(magnitude_spectrum, cmap='gray'),
plt.title('Magnitude Spectrum')
# Filtered Images
plt.subplot(2, 4, 3), plt.imshow(ideal_image, cmap='gray'),
plt.title('Ideal HPF')
plt.subplot(2, 4, 4), plt.imshow(butterworth_image, cmap='gray'),
plt.title('Butterworth HPF')
plt.subplot(2, 4, 5), plt.imshow(gaussian_image, cmap='gray'),
plt.title('Gaussian HPF')
# Perspective Plots of Transfer Functions
X, Y = np.meshgrid(np.arange(ideal_mask.shape[1]),
np.arange(ideal_mask.shape[0]))
ax1 = plt.subplot(2, 4, 6, projection='3d')
ax1.plot_surface(X, Y, ideal_mask, cmap='viridis')
ax1.set_title('Ideal HPF Transfer Function (3D)')
ax2 = plt.subplot(2, 4, 7, projection='3d')
ax2.plot_surface(X, Y, butterworth_mask, cmap='viridis')
ax2.set_title('Butterworth HPF Transfer Function (3D)')
ax3 = plt.subplot(2, 4, 8, projection='3d')
ax3.plot_surface(X, Y, gaussian_mask, cmap='viridis')
ax3.set_title('Gaussian HPF Transfer Function (3D)')
plt.show()

#Practical 5
!pip install numpy scipy matplotlib opencv-python
import numpy as np
import cv2
import matplotlib.pyplot as plt
from scipy.signal import convolve2d
def motion_blur(image, kernel_size, angle):
  kernel = np.zeros((kernel_size, kernel_size))
  kernel[int((kernel_size - 1) / 2), :] = np.ones(kernel_size)
  kernel = cv2.warpAffine(kernel, cv2.getRotationMatrix2D((kernel_size /2 - 0.5, kernel_size / 2 - 0.5), angle, 1.0), (kernel_size, kernel_size))
  kernel = kernel / np.sum(kernel)
  blurred = convolve2d(image, kernel, mode='same', boundary='wrap')
  return blurred
def inverse_filter(blurred, kernel, eps):
  blurred_fft = np.fft.fft2(blurred)
  kernel_fft = np.fft.fft2(kernel, s=blurred.shape)
  deblurred_fft = blurred_fft / (kernel_fft + eps) # Add eps to avoid division by zero
  deblurred = np.fft.ifft2(deblurred_fft).real
  return deblurred
def wiener_filter(blurred, kernel, k):
  blurred_fft = np.fft.fft2(blurred)
  kernel_fft = np.fft.fft2(kernel, s=blurred.shape)
  kernel_fft_conj = np.conj(kernel_fft)
  deblurred_fft = (kernel_fft_conj / (np.abs(kernel_fft)**2 + k)) *blurred_fft
  deblurred = np.fft.ifft2(deblurred_fft).real
  return deblurred
# Load image and apply motion blur
img = cv2.imread(â€˜mariya.jpgâ€™, cv2.IMREAD_GRAYSCALE)
kernel_size = 21
angle = 11
blurred = motion_blur(img, kernel_size, angle)
# Create blur kernel
kernel = np.zeros((kernel_size, kernel_size))
kernel[int((kernel_size - 1) / 2), :] = np.ones(kernel_size)
kernel = cv2.warpAffine(kernel, cv2.getRotationMatrix2D((kernel_size / 2 -0.5, kernel_size / 2 - 0.5), angle, 1.0), (kernel_size, kernel_size))
kernel = kernel / np.sum(kernel)
# Deblur using inverse filtering
deblurred_inverse = inverse_filter(blurred, kernel, 0.01)
# Deblur using Wiener filtering
deblurred_wiener = wiener_filter(blurred, kernel, 0.01)
# Display results
plt.figure(figsize=(12, 6))
plt.subplot(131), plt.imshow(img, cmap='gray'), plt.title('Original Image')
plt.subplot(132), plt.imshow(blurred, cmap='gray'), plt.title('BlurredImage')
plt.subplot(133), plt.imshow(deblurred_inverse, cmap='gray'),
plt.title('Inverse Filtered')
plt.show()
plt.figure(figsize=(12, 6))
plt.subplot(131), plt.imshow(img, cmap='gray'), plt.title('Original Image')
plt.subplot(132), plt.imshow(blurred, cmap='gray'), plt.title('Blurred Image')
plt.subplot(133), plt.imshow(deblurred_wiener, cmap='gray'),
plt.title('Wiener Filtered')
plt.show()

#Practical 6
import cv2
import numpy as np
import matplotlib.pyplot as plt
# Read and convert the image to grayscale
image = cv2.imread('mariya.jpg', cv2.IMREAD_GRAYSCALE)
# Sobel operator (Horizontal and Vertical)
sobel_x = cv2.Sobel(image, cv2.CV_64F, 1, 0, ksize=3) # Horizontal
sobel_y = cv2.Sobel(image, cv2.CV_64F, 0, 1, ksize=3) # Vertical
# Prewitt operator (Horizontal and Vertical)
kernel_x = np.array([[-1, 0, 1], [-1, 0, 1], [-1, 0, 1]])
kernel_y = np.array([[1, 1, 1], [0, 0, 0], [-1, -1, -1]])
prewitt_x = cv2.filter2D(image, -1, kernel_x) # Horizontal
prewitt_y = cv2.filter2D(image, -1, kernel_y) # Vertical
# Canny operator
canny_edges = cv2.Canny(image, 100, 200)
# Laplacian operator
laplacian = cv2.Laplacian(image, cv2.CV_64F)
# Display results
titles = ['Original', 'Sobel X', 'Sobel Y', 'Prewitt X', 'Prewitt Y','Canny', 'Laplacian']
images = [image, sobel_x, sobel_y, prewitt_x, prewitt_y, canny_edges,laplacian]
plt.figure(figsize=(15, 10))
for i in range(len(images)):
  plt.subplot(3, 3, i + 1)
  plt.imshow(images[i], cmap='gray')
  plt.title(titles[i])
  plt.axis('off')
plt.tight_layout()
plt.show()

#Practical 7
import cv2
import numpy as np
import matplotlib.pyplot as plt
# Load the image
image = cv2.imread('blob.jpg', cv2.IMREAD_GRAYSCALE)
# Create a structuring element
kernel = np.ones((5,5), np.uint8)
# Perform erosion
erosion = cv2.erode(image, kernel, iterations = 1)
# Perform dilation
dilation = cv2.dilate(image, kernel, iterations = 1)
# Perform opening
opening = cv2.morphologyEx(image, cv2.MORPH_OPEN, kernel)
# Perform closing
closing = cv2.morphologyEx(image, cv2.MORPH_CLOSE, kernel)
# Display the results in subplots
plt.figure(figsize=(12, 8))
plt.subplot(2, 3, 1)
plt.imshow(image, cmap='gray')
plt.title('Original Image')
plt.subplot(2, 3, 2)
plt.imshow(erosion, cmap='gray')
plt.title('Erosion')
plt.subplot(2, 3, 3)
plt.imshow(dilation, cmap='gray')
plt.title('Dilation')
plt.subplot(2, 3, 4)
plt.imshow(opening, cmap='gray')
plt.title('Opening')
plt.subplot(2, 3, 5)
plt.imshow(closing, cmap='gray')
plt.title('Closing')
plt.tight_layout()
plt.show()

